table 'Economic Indicator'
	lineageTag: 8f84cfab-6b09-4312-aab4-394363cac023

	column inflation
		dataType: double
		lineageTag: 179ffee8-d754-47a2-8c17-406f5a970c81
		summarizeBy: sum
		sourceColumn: inflation

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column ppi
		dataType: double
		lineageTag: 21ac45b7-aa87-4295-83fa-9a54578c18e9
		summarizeBy: sum
		sourceColumn: ppi

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column cpi
		dataType: double
		lineageTag: be5bd529-9346-45b1-9dd5-57da27b2c7bf
		summarizeBy: sum
		sourceColumn: cpi

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column lf
		dataType: double
		lineageTag: 04a385b8-bf35-4e54-a2f3-20a869e5adbd
		summarizeBy: sum
		sourceColumn: lf

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column p_rate
		dataType: double
		lineageTag: c6b54f18-7251-4c9d-bbfd-16228dd22a2a
		summarizeBy: sum
		sourceColumn: p_rate

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column u_rate
		dataType: double
		lineageTag: aa9eb094-e74d-463a-8b3c-1b73b855d034
		summarizeBy: sum
		sourceColumn: u_rate

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column lf_unemployed
		dataType: double
		lineageTag: fac1b87b-6bc9-4a50-b99c-c0b3b799b0b4
		summarizeBy: sum
		sourceColumn: lf_unemployed

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column lf_outside
		dataType: double
		lineageTag: 94458244-4fe7-40ee-8ffa-094d87548625
		summarizeBy: sum
		sourceColumn: lf_outside

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column ep_ratio
		dataType: double
		lineageTag: 0f4896e8-e7b0-45b1-8e81-cf8c0d3cfcf4
		summarizeBy: sum
		sourceColumn: ep_ratio

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column inflation_lag1
		dataType: double
		lineageTag: 17f9777a-99be-4e6f-b39a-7ec85c0d1eda
		summarizeBy: sum
		sourceColumn: inflation_lag1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column inflation_lag2
		dataType: double
		lineageTag: 343f8111-eabf-4c71-8ac0-437fe390f521
		summarizeBy: sum
		sourceColumn: inflation_lag2

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column inflation_lag3
		dataType: double
		lineageTag: e7da4ab9-cbd5-42de-a395-d353d268f4fc
		summarizeBy: sum
		sourceColumn: inflation_lag3

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column inflation_lag4
		dataType: double
		lineageTag: 653134fa-ab8e-4422-ab7e-2c69fad2214f
		summarizeBy: sum
		sourceColumn: inflation_lag4

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column inflation_lag5
		dataType: double
		lineageTag: 6c50a2bb-cd5d-4d6d-97be-14479103c1ad
		summarizeBy: sum
		sourceColumn: inflation_lag5

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column inflation_lag6
		dataType: double
		lineageTag: 5135139d-10c3-4bd0-bbbd-0341378b9923
		summarizeBy: sum
		sourceColumn: inflation_lag6

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column time_index
		dataType: int64
		formatString: 0
		lineageTag: 4f9375ed-206b-4480-b057-1c223f094ecb
		summarizeBy: sum
		sourceColumn: time_index

		annotation SummarizationSetBy = Automatic

	column ppi_ma3
		dataType: double
		lineageTag: 4de260c4-4a98-4cea-8abc-68c520b9f9c4
		summarizeBy: sum
		sourceColumn: ppi_ma3

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column u_rate_ma3
		dataType: double
		lineageTag: aa7a318a-3d25-4039-81a1-dd5952c57d83
		summarizeBy: sum
		sourceColumn: u_rate_ma3

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column economic_indicator_index
		dataType: double
		lineageTag: 5c31aed3-bc3a-44e2-a302-6f1b2ae31072
		summarizeBy: sum
		sourceColumn: economic_indicator_index

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column economic_indicator_index_norm
		dataType: double
		lineageTag: d21f5af1-11a8-48a0-8f82-cc6632f13f78
		summarizeBy: sum
		sourceColumn: economic_indicator_index_norm

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column is_forecasted
		dataType: int64
		formatString: 0
		lineageTag: 38c79559-52a7-4744-80f6-8857ee842053
		summarizeBy: sum
		sourceColumn: is_forecasted

		annotation SummarizationSetBy = Automatic

	partition 'Economic Indicator' = m
		mode: import
		source =
				let
				    Source = Csv.Document(File.Contents("C:\Users\User\Desktop\MDITxDOSM\dataset\economic_indicator_table.csv"),[Delimiter=",", Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),
				    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
				    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"", Int64.Type}, {"date", type date}, {"inflation", type number}, {"ppi", type number}, {"cpi", type number}, {"lf", type number}, {"p_rate", type number}, {"u_rate", type number}, {"lf_unemployed", type number}, {"lf_outside", type number}, {"ep_ratio", type number}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"date", ""}),
				    #"Changed Type1" = Table.TransformColumnTypes(#"Removed Columns",{{"inflation", type number}, {"ppi", type number}, {"cpi", type number}, {"lf", type number}, {"p_rate", type number}, {"u_rate", type number}, {"lf_unemployed", type number}, {"lf_outside", type number}, {"ep_ratio", type number}}),
				    #"Run Python script" = Python.Execute("import pandas as pd#(lf)import numpy as np#(lf)from catboost import CatBoostRegressor, Pool#(lf)from sklearn.preprocessing import StandardScaler#(lf)from sklearn.decomposition import PCA#(lf)from statsmodels.tsa.holtwinters import ExponentialSmoothing#(lf)from statsmodels.tsa.arima.model import ARIMA#(lf)#(lf)# ===========================================#(lf)# POWER BI: dataset is passed automatically#(lf)# ===========================================#(lf)# Ensure Power BI query provides at least:#(lf)# 'inflation_mom', 'ppi_mom', 'lf', 'p_rate', 'u_rate',#(lf)# 'lf_unemployed', 'lf_outside', 'ep_ratio'#(lf)#(lf)combined = dataset.copy()#(lf)#(lf)# FIX: Convert potential non-numeric columns to numbers.#(lf)numeric_cols = [#(lf)    'inflation', 'ppi', 'cpi', 'lf', 'p_rate', 'u_rate',#(lf)    'lf_unemployed', 'lf_outside', 'ep_ratio'#(lf)]#(lf)for col in numeric_cols:#(lf)    if col in combined.columns:#(lf)        combined[col] = pd.to_numeric(combined[col], errors='coerce')#(lf)#(lf)# Clean dataset#(lf)combined = combined.dropna().drop_duplicates().reset_index(drop=True)#(lf)#(lf)# ==============================#(lf)# FEATURE ENGINEERING (no date)#(lf)# ==============================#(lf)for lag in range(1, 7):#(lf)    combined[f'inflation_lag{lag}'] = combined['inflation'].shift(lag)#(lf)#(lf)combined['time_index'] = np.arange(len(combined))#(lf)combined['ppi_ma3'] = combined['ppi'].rolling(window=3, min_periods=1).mean()#(lf)combined['u_rate_ma3'] = combined['u_rate'].rolling(window=3, min_periods=1).mean()#(lf)combined = combined.dropna().reset_index(drop=True)#(lf)#(lf)# ==============================#(lf)# PCA INDEX BUILDING (Min-Max Scaling + Baseline 100)#(lf)# ==============================#(lf)index_features = ['inflation', 'ppi', 'cpi', 'lf', 'p_rate', 'u_rate']#(lf)index_scaler = StandardScaler()#(lf)index_scaled = index_scaler.fit_transform(combined[index_features])#(lf)#(lf)pca = PCA(n_components=1)#(lf)economic_index_pca = pca.fit_transform(index_scaled)#(lf)#(lf)# Min-Max Scaling to 0â€“1#(lf)economic_index_min = economic_index_pca.min()#(lf)economic_index_max = economic_index_pca.max()#(lf)economic_index_scaled = (economic_index_pca - economic_index_min) / (economic_index_max - economic_index_min)#(lf)#(lf)combined['economic_indicator_index'] = economic_index_scaled#(lf)# Shift to baseline 100 (min = 100, max = 200)#(lf)combined['economic_indicator_index_norm'] = 100 + (economic_index_scaled * 100)#(lf)#(lf)# ==============================#(lf)# TRAIN MODEL (CatBoost)#(lf)# ==============================#(lf)model_data = combined.drop(#(lf)    ['economic_indicator_index', 'economic_indicator_index_norm'],#(lf)    axis=1, errors='ignore'#(lf))#(lf)#(lf)X = model_data.drop(['inflation'], axis=1)#(lf)y = model_data['inflation']#(lf)#(lf)model = CatBoostRegressor(verbose=0, random_seed=42, iterations=500)#(lf)model.fit(X, y)#(lf)#(lf)# ==============================#(lf)# FORECAST NEXT 60 PERIODS#(lf)# ==============================#(lf)future_data = model_data.iloc[-1:].copy()#(lf)future_predictions = []#(lf)future_rows = []#(lf)#(lf)last_time_index = combined['time_index'].iloc[-1]#(lf)#(lf)# Helper function for forecasting independent variables#(lf)def forecast_variable_simple(series, n_periods=60):#(lf)    try:#(lf)        model = ExponentialSmoothing(series, trend='add', seasonal=None)#(lf)        fitted = model.fit()#(lf)        forecast = fitted.forecast(steps=n_periods)#(lf)    except:#(lf)        x = np.arange(len(series))#(lf)        z = np.polyfit(x, series, 1)#(lf)        p = np.poly1d(z)#(lf)        forecast_x = np.arange(len(series), len(series) + n_periods)#(lf)        forecast = p(forecast_x)#(lf)    return forecast#(lf)#(lf)cpi_forecast = forecast_variable_simple(combined['cpi'].values, 60)#(lf)ppi_forecast = forecast_variable_simple(combined['ppi'].values, 60)#(lf)lf_forecast = forecast_variable_simple(combined['lf'].values, 60)#(lf)p_rate_forecast = forecast_variable_simple(combined['p_rate'].values, 60)#(lf)u_rate_forecast = forecast_variable_simple(combined['u_rate'].values, 60)#(lf)lf_unemployed_forecast = forecast_variable_simple(combined['lf_unemployed'].values, 60)#(lf)lf_outside_forecast = forecast_variable_simple(combined['lf_outside'].values, 60)#(lf)ep_ratio_forecast = forecast_variable_simple(combined['ep_ratio'].values, 60)#(lf)#(lf)for i in range(60):#(lf)    current_time_index = last_time_index + i + 1#(lf)#(lf)    future_data['time_index'] = current_time_index#(lf)    future_data['ppi'] = ppi_forecast[i]#(lf)    future_data['lf'] = lf_forecast[i]#(lf)    future_data['p_rate'] = p_rate_forecast[i]#(lf)    future_data['u_rate'] = u_rate_forecast[i]#(lf)    future_data['lf_unemployed'] = lf_unemployed_forecast[i]#(lf)    future_data['lf_outside'] = lf_outside_forecast[i]#(lf)    future_data['ep_ratio'] = ep_ratio_forecast[i]#(lf)#(lf)    if i >= 2:#(lf)        future_data['ppi_ma3'] = np.mean(ppi_forecast[i-2:i+1])#(lf)        future_data['u_rate_ma3'] = np.mean(u_rate_forecast[i-2:i+1])#(lf)    else:#(lf)        future_data['ppi_ma3'] = np.mean(ppi_forecast[:i+1])#(lf)        future_data['u_rate_ma3'] = np.mean(u_rate_forecast[:i+1])#(lf)#(lf)    X_future = future_data[X.columns]#(lf)    predicted_inflation = model.predict(X_future)[0]#(lf)#(lf)    noise = np.random.normal(0, 0.02, 1)[0]#(lf)    predicted_inflation += noise#(lf)#(lf)    future_predictions.append(predicted_inflation)#(lf)#(lf)    for lag in range(6, 1, -1):#(lf)        future_data[f'inflation_lag{lag}'] = future_data[f'inflation_lag{lag-1}']#(lf)    future_data['inflation_lag1'] = predicted_inflation#(lf)#(lf)    future_rows.append(future_data.copy())#(lf)#(lf)future_df = pd.concat(future_rows, ignore_index=True)#(lf)#(lf)# Recompute PCA index for forecasted period (using training scaler & PCA)#(lf)future_index_df = pd.DataFrame({#(lf)    'inflation': future_predictions,#(lf)    'ppi': ppi_forecast,#(lf)    'cpi': cpi_forecast,#(lf)    'lf': lf_forecast,#(lf)    'p_rate': p_rate_forecast,#(lf)    'u_rate': u_rate_forecast,#(lf)})#(lf)future_index_scaled = index_scaler.transform(future_index_df)#(lf)future_index = pca.transform(future_index_scaled)#(lf)#(lf)# Apply same min-max scaling as training set + shift to baseline 100#(lf)future_index_scaled = (future_index - economic_index_min) / (economic_index_max - economic_index_min)#(lf)future_index_norm = 100 + (future_index_scaled * 100)#(lf)#(lf)future_df['inflation'] = future_predictions#(lf)future_df['economic_indicator_index'] = future_index_scaled#(lf)future_df['economic_indicator_index_norm'] = future_index_norm#(lf)future_df['is_forecasted'] = 1#(lf)#(lf)combined['is_forecasted'] = 0#(lf)final_df = pd.concat([combined, future_df], ignore_index=True)#(lf)#(lf)# Return final dataset to Power BI#(lf)result = final_df[final_df['is_forecasted'] == 0]",[dataset=#"Changed Type1"]),
				    result = #"Run Python script"{[Name="result"]}[Value],
				    #"Changed Type2" = Table.TransformColumnTypes(result,{{"inflation", type number}, {"ppi", type number}, {"cpi", type number}, {"lf", type number}, {"p_rate", type number}, {"u_rate", type number}, {"lf_unemployed", type number}, {"lf_outside", type number}, {"ep_ratio", type number}, {"inflation_lag1", type number}, {"inflation_lag2", type number}, {"inflation_lag3", type number}, {"inflation_lag4", type number}, {"inflation_lag5", type number}, {"inflation_lag6", type number}, {"time_index", Int64.Type}, {"ppi_ma3", type number}, {"u_rate_ma3", type number}, {"economic_indicator_index", type number}, {"economic_indicator_index_norm", type number}, {"is_forecasted", Int64.Type}})
				in
				    #"Changed Type2"

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

